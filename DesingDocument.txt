Eduardo Santin 
Design Document Project 2
Class Name: CCOM 4029 
e-mail: eduardo.santin@upr.edu

Part 1:

Possible design patterns for implementation:
MVC patterns: Could be used for the classes that have visual interfaces in the gui so we can modify the data and display it correctly 

Command pattern: Could be used for the classes that involve stack like behavior like mystack, pile and deck classes

Singleton pattern: Usable to create static instance of a one use button like the a play button. 
MyStack.java{
    Creates a my stack object that will be the superclass of the Pile class.

}

Pile.java{
    Class that is a subclass of mystack, this class will be used to configure the
    the discard pile in the rummy game
}

Hand.java{

}

Proj2.java{
    Class file that will act as the main file for the proyect, it will communicate with the rest of the classes to 
    run the rummy game, here the user will able to determine the amount of players for the game. 
}

Deck.java{

    Includes a list of the cards and includes functions on how to manipulate the deck

}

Set.java{
    Class that will create a hand for the "Sets" of cards of the game 
}

 Table.java{
     Creates the entire gui interface for the game, communicates with all the previously mentioned classes
 }

Part 2

public class MyStack {

    protected LinkedList list;

    /**
    * Name: MyStack
    * PreCondition: Constructor
    * PostCondition: Initializes the data members
    * @params none
    */
    public MyStack();

    /**
    * Name: pop
    * PreCondition: none
    * PostCondition: removes and returns the top of the stack
    * @params none
    */
    public Object pop();

    /**
    * Name: insert 
    * PreCondition: an object
    * PostCondition: adds object to top of stack
    * @params obj - Object to be pushed
    */
    public void push(Object obj);

    /**
    * Name: Empty()
    * PreCondition: none
    * PostCondition: returns true if stack is empty, false otherwise
    * @params none
    */
    public bool isEmpty();

    /**
    * Name: top()
    * PreCondition: none
    * PostCondition: returns the object at the stop of the stack
    * @params none
    */
    public Object top();

}

public class Pile extends MyStack() {

    /**
    * Name: Pile
    *Constructor
    * PreCondition: None
    * PostCondition: Initializes the data members
    * @params none
    */
    public Pile();

    /**
    * Name: draw
    * PreCondition: none
    * PostCondition: gives the player the card at the top of the pile  
    * @params none
    */
    public Object draw();

    /**
    * Name: lay
    * PreCondition: none
    * PostCondition: lays a card to the top of the pile
    * @params none
    */
    public void lay(Card obj);

}


public class Proj2{
    /**
    * Name: main
    * PreCondition: Run the executable
    * PostCondition: user terminates the program
    * @params flags â€“ command line arguments
    */
    public static void main(String[] args);
}